dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
test <- data$countriesAndTerritories['cases'].levels
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
test <- unique(data$countriesAndTerritories)
test
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in countrylist){
print(country, data[data$countriesAndTerritories == country]$cases)
}
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
print(country, data[data$countriesAndTerritories == country]$cases)
}
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
print(country, data[data$countriesAndTerritories == country,]$cases)
}
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
country
data[data$countriesAndTerritories == country,]$cases)
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
country
data[data$countriesAndTerritories == country,]$cases
}
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
print(country)
print(data[data$countriesAndTerritories == country,]$cases)
}
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
print(country)
print(sum(data[data$countriesAndTerritories == country,]$cases))
}
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
for (country in country_list){
print(country)
print(sum(data[data$countriesAndTerritories == country,]$cases))
}
print(model_df$total_cases)
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
country_list <- unique(data$countriesAndTerritories)
new_total_cases_column <- c()
for (country in country_list){
new_total_cases_column <- c(new_total_cases_column, sum(data[data$countriesAndTerritories == country,]$cases) )
}
model_df$anthonys_total_cases <- new_total_cases_column
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
new_total_cases_column <- c()
for (country in twenty_countries){
new_total_cases_column <- c(new_total_cases_column, sum(data[data$countriesAndTerritories == country,]$cases) )
}
model_df$anthonys_total_cases <- new_total_cases_column
head(model_df)
# The code below creates a new data frame, 'model_df,' that includes the area,
# GDP per capita, population and population density for the twenty (20)
# countries of interest. All you should need to do is execute this code, as is.
# You do not need to add code in this chunk. You will need to add code in the
# 'regression_b,' 'regression_c' and 'regression_d' code chunks.
twenty_countries <- c("Austria", "Belgium", "Bulgaria", "Cyprus", "Denmark",
"Finland", "France", "Germany", "Hungary", "Ireland",
"Latvia", "Lithuania", "Malta", "Norway", "Poland",
"Portugal", "Romania", "Slovakia", "Spain", "Sweden")
sq_km <- c(83858, 30510, 110994, 9251, 44493, 338145, 551695, 357386, 93030,
70273, 64589, 65300, 316, 385178, 312685, 88416, 238397, 49036,
498511, 450295)
gdp_pps <- c(128, 118, 51, 91, 129, 111, 104, 123, 71, 190, 69, 81, 100, 142,
71, 78, 65, 71, 91, 120)
model_df <- data %>%
select(c(countriesAndTerritories, popData2020)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
distinct(countriesAndTerritories, .keep_all = TRUE) %>%
add_column(sq_km, gdp_pps) %>%
mutate(pop_dens = popData2020 / sq_km) %>%
rename(country = countriesAndTerritories, pop = popData2020)
head(model_df)
### The following code will be removed for students to complete the work themselves.
total_cases <- data %>%
select(c(countriesAndTerritories, cases)) %>%
group_by(countriesAndTerritories) %>%
dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
filter(countriesAndTerritories %in% twenty_countries) %>%
select(total_cases)
model_df <- model_df %>%
add_column(total_cases)
# This is probably much less efficient, but how I would've done it:
new_total_cases_column <- c()
for (country in twenty_countries){
new_total_cases_column <- c(new_total_cases_column, sum(data[data$countriesAndTerritories == country,]$cases) )
}
model_df$anthonys_total_cases <- new_total_cases_column
head(model_df)
### The following code will be removed for students to complete the work themselves.
# total_cases <- data %>%
#   select(c(countriesAndTerritories, cases)) %>%
#   group_by(countriesAndTerritories) %>%
#   dplyr::summarize(total_cases = sum(cases, na.rm = TRUE)) %>%
#   filter(countriesAndTerritories %in% twenty_countries) %>%
#   select(total_cases)
#
# model_df <- model_df %>%
#   add_column(total_cases)
# This is how I would've done it:
new_total_cases_column <- c()
for (country in twenty_countries){
new_total_cases_column <- c(new_total_cases_column, sum(data[data$countriesAndTerritories == country,]$cases) )
}
model_df$anthonys_total_cases <- new_total_cases_column
head(model_df)
model <- lm(anthonys_total_cases ~ pop + pop_dens + gdp_pps, data=data)
model <- lm(anthonys_total_cases ~ pop + pop_dens + gdp_pps, data=model_df)
summary(model)
# Creating dataframes with only germany and czech data
germany_df <- data[data$countriesAndTerritories == 'Germany',]
czech_df <- data[data$countriesAndTerritories == 'Czechia',]
# Plotting the incidence rates
plot(x=germany_df$dateRep, y=germany_df$incidence_rate, type='l', col='firebrick2', lwd=2,
ylab='Incidence Rate', xlab='Date', main='Incidence Rates: Germany and Czech Republic')
lines(x=czech_df$dateRep, y=czech_df$incidence_rate, type='l', col='dodgerblue', lwd=2)
legend('topright', legend=c('Germany','Czechia'), fill=c('firebrick2','dodgerblue'))
# t-test
# We'll let alpha = 0.01 for a 99% confidence interval
alpha = 0.01
t.test(germany_df[germany_df$countriesAndTerritories == 'Germany', 11],
czech_df[czech_df$countriesAndTerritories == 'Czechia', 11],
conf.level = 1-alpha)
# Our multiple regression model
model <- lm(anthonys_total_cases ~ pop + pop_dens + gdp_pps, data=model_df)
summary(model)
reduced_model <- lm(anthonys_total_cases ~ pop, data=model_df)
summary(reduced_model)
# Our multiple regression model
model <- lm(anthonys_total_cases ~ pop + pop_dens + gdp_pps, data=model_df)
summary(model)
reduced_model <- lm(anthonys_total_cases ~ pop + gpd_pps, data=model_df)
# Our multiple regression model
model <- lm(anthonys_total_cases ~ pop + pop_dens + gdp_pps, data=model_df)
summary(model)
reduced_model <- lm(anthonys_total_cases ~ pop + gdp_pps, data=model_df)
summary(reduced_model)
# Our multiple regression model
model <- lm(anthonys_total_cases ~ pop + pop_dens + gdp_pps, data=model_df)
summary(model)
# Showing an example of a reduced model (without population density)
reduced_model <- lm(anthonys_total_cases ~ pop + gdp_pps, data=model_df)
summary(reduced_model)
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
sprintf('Luxembourg Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
sprintf('Luxembourg Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sprintf('Netherlands Total Cases: %d', sum(data[data$countriesAndTerritories == "Netherlands",]$cases))
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
sprintf('Luxembourg Actual Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sprintf('Netherlands Actual Total Cases: %d', sum(data[data$countriesAndTerritories == "Netherlands",]$cases))
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
sprintf('Luxembourg Predicted Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sprintf('Netherlands Predicted Total Cases: %d', sum(data[data$countriesAndTerritories == "Netherlands",]$cases))
head(data)
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
sprintf('Luxembourg Actual Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sprintf('Netherlands Actual Total Cases: %d', sum(data[data$countriesAndTerritories == "Netherlands",]$cases))
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
sprintf('Luxembourg Predicted Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sprintf('Netherlands Predicted Total Cases: %d', sum(data[data$countriesAndTerritories == "Netherlands",]$cases))
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
sprintf('Luxembourg Actual Total Cases: %d', sum(data[data$countriesAndTerritories == "Luxembourg",]$cases))
sprintf('Netherlands Actual Total Cases: %d', sum(data[data$countriesAndTerritories == "Netherlands",]$cases))
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata)
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- c(lux_actual / 1726198 , net_actual / 4071820 )
error
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- (c(lux_actual / 1726198 , net_actual / 4071820 ) - 1) * 100
error
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- (c(lux_actual / 1726198 , net_actual / 4071820 )) * 100
error
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- c(lux_actual / 1726198 , net_actual / 4071820 )
error
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- c(1726198 / lux_actual , 4071820 / net_actual)
error
View(model_df)
View(model_df)
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- c(1726198 / lux_actual , 4071820 / net_actual)
error
plot(model)
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- c(1726198 / lux_actual , 4071820 / net_actual)
error
plot(model)
plot(reduced_model)
predict(reduced_model, newdata)
# The code below defines our 'newdata' data frame for applying our model to the
# population, population density and GDP per capita for two (2). Please execute
# the code as given.
newdata <- data.frame(country = c("Luxembourg", "Netherlands"),
pop = c(626108, 17407585),
gdp_pps = c(261, 130),
pop_dens = c(626108, 17407585) / c(2586, 41540))
# Add code here returning the actual  total cases from our dataset for the
# Netherlands and Luxembourg.
lux_actual <- sum(data[data$countriesAndTerritories == "Luxembourg",]$cases)
net_actual <- sum(data[data$countriesAndTerritories == "Netherlands",]$cases)
sprintf('Luxembourg Actual Total Cases: %d', lux_actual)
sprintf('Netherlands Actual Total Cases: %d', net_actual)
# Add code here returning the total cases for the Netherlands and Luxembourg
# predicted by our model.
predict(model, newdata) # Luxembourg = 1726198 , Netherlands = 4071820
error <- c(1726198 / lux_actual , 4071820 / net_actual)
error
plot(model)
library(rethinking)
install.packages("rethinking")
install.packages("plumber")
source("run_server.R")
setwd("~/Game Development/hmm/R")
source("run_server.R")
source("run_server.R")
source("run_server.R")
getwd()
list.files()
source("run_server.R")
source("run_server.R")
source("run_server.R")
source("run_server.R")
gc()
source("run_server.R")
source("run_server.R")
source("run_server.R")
